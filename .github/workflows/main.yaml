name: main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    strategy:
      fail-fast: false
      matrix:
        architecture: [amd64, arm64]
    runs-on: ${{ matrix.architecture == 'amd64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}
    # Github hosted arm runners are in public preview, so there are no ubuntu-latest-arm images yet
    outputs:
      short_git_sha: ${{ steps.vars.outputs.SHORT_GIT_SHA }}
      short_git_version_string: ${{ steps.vars.outputs.SHORT_GIT_VERSION_STRING }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          calculatedGitVersionString=$(git log --date=format:%Y%m%d --pretty=~git%cd.%h -n 1)
          echo "SHORT_GIT_SHA=$calculatedSha" >> $GITHUB_OUTPUT
          echo "SHORT_GIT_VERSION_STRING=$calculatedGitVersionString" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.architecture }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          config: .github/buildkitd.toml

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Container metadata for tii-px4-msgs
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/tiiuae/tii-px4-msgs
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.architecture }}
            type=ref,event=pr,suffix=-${{ matrix.architecture }}
            type=semver,pattern={{raw}},suffix=-${{ matrix.architecture }}
            type=sha,suffix=-${{ matrix.architecture }}
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}

      - name: Build and push debian package container
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: ./Dockerfile
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          platforms: linux/${{ matrix.architecture }}
          build-args: |
            PACKAGE_NAME=px4-msgs
            GIT_RUN_NUMBER=${{ github.run_number }}
            GIT_COMMIT_HASH=${{ github.sha }}
            GIT_VERSION_STRING=${{ steps.vars.outputs.SHORT_GIT_VERSION_STRING }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: mode=min

      - name: Create container and copy deb packages
        run: |
          docker create -ti --name "px4-msgs-build-temp-${{ matrix.architecture }}" --platform=linux/${{ matrix.architecture }} $(echo "${{ steps.meta.outputs.tags }}" | head -1) bash
          docker cp "px4-msgs-build-temp-${{ matrix.architecture }}:/artifacts/." ./output_dir
          docker rm "px4-msgs-build-temp-${{ matrix.architecture }}"

      - name: Upload .deb packages as artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-packages-${{ matrix.architecture }}
          path: ./output_dir/*.deb

  merge_images:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Container metadata for tii-px4-msgs
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/tiiuae/tii-px4-msgs
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{raw}}
            type=sha
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create combined image manifests
        run: |
          echo "Debug: Tags are ${{ steps.meta.outputs.tags }}"
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            echo "Creating manifest for tag: $tag"
            docker manifest create "$tag" \
              "$tag-amd64" \
              "$tag-arm64"
            docker manifest push "$tag"
          done
